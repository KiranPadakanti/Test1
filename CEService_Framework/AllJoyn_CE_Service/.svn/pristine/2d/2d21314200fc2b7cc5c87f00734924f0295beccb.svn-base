#include "OptParser.h"
#include <GuidUtil.h>
#include <alljoyn/about/AboutPropertyStoreImpl.h>

static const char versionPreamble[] = "VendorService version: 1\n"
		"Copyright (c) 2009-2013 AllSeen Alliance.\n";

using namespace ajn;
using namespace services;

OptParser::OptParser(int argc, char** argv) :
		argc(argc), argv(argv)
{
	port = 900;
	GuidUtil::GetInstance()->GetDeviceIdString(&deviceId);
	GuidUtil::GetInstance()->GenerateGUID(&appGUID);
	deviceName.assign("MyDeviceName");
	defaultLanguage.assign("en");
	appName.assign("VendorServiceApp");
}

qcc::String OptParser::GetAppId() const
{
	return appGUID;
}

qcc::String OptParser::GetAppName() const
{
	return appName;
}

qcc::String OptParser::GetDeviceId() const
{
	return deviceId;
}

qcc::String OptParser::GetDeviceName() const
{
	return deviceName;
}

qcc::String OptParser::GetDefaultLanguage() const
{
	return defaultLanguage;
}

int OptParser::GetPort() const
{
	return port;
}

void OptParser::PrintUsage()
{
	qcc::String cmd = argv[0];
	cmd = cmd.substr(cmd.find_last_of('/') + 1);

	std::cerr << cmd.c_str()
			<< " [--port=PORT | --language=LANG | --deviceId=DEVICEID | "
					"--appId=APPID | --appName=APPNAME | --deviceName=DEVICENAME]\n"

					"    --appName\n"
					"        Use the specified AppName.\n\n"
					"    --port=\n"
					"        used to bind the service.\n\n"
					"    --deviceId\n"
					"        Use the specified DeviceID.\n\n"
					"    --deviceName\n"
					"        Use the specified DeviceName.\n\n"
					"    --appId=\n"
					"        Use the specified it is HexString of 16 bytes (32 chars) \n\n"
					"    --language=\n"
					"       default language for PropertyStore\n\n"
					"    --version\n"
					"        Print the version and copyright string, and exit."
			<< std::endl;
}

bool OptParser::IsAllHex(const char* data)
{

	for (size_t index = 0; index < strlen(data); ++index)
	{
		if (!isxdigit(data[index]))
		{
			return false;
		}

	}
	return true;

}

OptParser::ParseResultCode OptParser::ParseResult()
{
	ParseResultCode result = PR_OK;

	if (argc == 1)
	{

		return result;
	}

	int indx;
	for (indx = 1; indx < argc; indx++)
	{
		qcc::String arg(argv[indx]);
		if (arg.compare("--version") == 0)
		{
			std::cout << versionPreamble << std::endl;
			result = PR_EXIT_NO_ERROR;
			break;
		}
		else if (arg.compare(0, sizeof("--port") - 1, "--port") == 0)
		{
			port = atoi(arg.substr(sizeof("--port")).c_str());
		}
		else if (arg.compare(0, sizeof("--deviceId") - 1, "--deviceId") == 0)
		{
			deviceId = arg.substr(sizeof("--deviceId"));
		}
		else if (arg.compare(0, sizeof("--deviceName") - 1, "--deviceName")
				== 0)
		{
			deviceName = arg.substr(sizeof("--deviceName"));
		}
		else if (arg.compare(0, sizeof("--appId") - 1, "--appId") == 0)
		{
			appGUID = arg.substr(sizeof("--appId"));
			if ((appGUID.length() != 32) || (!IsAllHex(appGUID.c_str())))
			{
				result = PR_INVALID_APPID;
				std::cerr << "Invalid appId: \"" << argv[indx] << "\""
						<< std::endl;
				break;
			}
		}
		else if (arg.compare(0, sizeof("--appName") - 1, "--appName") == 0)
		{
			appName = arg.substr(sizeof("--appName"));
		}
		else if (arg.compare(0, sizeof("--language") - 1, "--language") == 0)
		{
			defaultLanguage = arg.substr(sizeof("--language"));
		}
		else if ((arg.compare("--help") == 0) || (arg.compare("-h") == 0))
		{
			PrintUsage();
			result = PR_EXIT_NO_ERROR;
			break;
		}
		else
		{
			result = PR_INVALID_OPTION;
			std::cerr << "Invalid option: \"" << argv[indx] << "\""
					<< std::endl;
			break;
		}
	}
	return result;
}
