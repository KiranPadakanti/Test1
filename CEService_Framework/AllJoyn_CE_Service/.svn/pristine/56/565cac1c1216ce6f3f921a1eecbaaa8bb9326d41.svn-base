#include <algorithm>
#include <iostream>
#include <alljoyn/vendor/VendorService.h>
#include <alljoyn/BusAttachment.h>
#include <qcc/Debug.h>
#include <alljoyn/vendor/LogModule.h>

#define VENDOR_SERVICE_VERSION 1

using namespace ajn;
using namespace services;

static const char* VENDOR_INTERFACE_NAME = "org.alljoyn.VENDOR";

VendorService::VendorService(ajn::BusAttachment& bus, PropertyStore& store,
		Listener& listener) :
		BusObject("/VENDOR"), m_BusAttachment(&bus), m_PropertyStore(&store), m_Listener(
				&listener)
{
	QCC_DbgTrace(("VendorService::%s", __FUNCTION__));
	std::vector<qcc::String> v;
	v.push_back(VENDOR_INTERFACE_NAME);
}

QStatus VendorService::Register()
{
	QCC_DbgTrace(("VendorService::%s", __FUNCTION__));
	QStatus status = ER_OK;

	InterfaceDescription* p_InterfaceDescription =
			const_cast<InterfaceDescription*>(m_BusAttachment->GetInterface(
					VENDOR_INTERFACE_NAME));
	if (!p_InterfaceDescription)
	{
		status = m_BusAttachment->CreateInterface(VENDOR_INTERFACE_NAME,
				p_InterfaceDescription, false);
		if (status != ER_OK)
		{
			return status;
		}

		if (!p_InterfaceDescription)
		{
			return ER_BUS_CANNOT_ADD_INTERFACE;
		}

		status = p_InterfaceDescription->AddMethod("VendorSendCECommand", "uu",
		NULL, "command,la");
		if (status != ER_OK)
		{
			return status;
		}

		status = p_InterfaceDescription->AddProperty("Version", "q",
				(uint8_t) PROP_ACCESS_READ);
		if (status != ER_OK)
		{
			return status;
		}

		p_InterfaceDescription->Activate();
	}

	status = AddInterface(*p_InterfaceDescription);
	if (status == ER_OK)
	{
		status =
				AddMethodHandler(
						p_InterfaceDescription->GetMember(
								"VendorSendCECommand"),
						static_cast<MessageReceiver::MethodHandler>(&VendorService::VendorSendCECommand));
		if (status != ER_OK)
		{
			return status;
		}
	}

	return (status == ER_BUS_IFACE_ALREADY_EXISTS) ? ER_OK : status;
}

void VendorService::Unregister()
{
	QCC_DbgTrace(("VendorService::%s", __FUNCTION__));
}

void VendorService::VendorSendCECommand(
		const ajn::InterfaceDescription::Member* member, ajn::Message& msg)
{
	QCC_DbgTrace(("VendorService::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const ajn::MsgArg* args = 0;
	size_t numArgs = 0;
	msg->GetArgs(numArgs, args);
	if (numArgs == 2)
	{
		/* Application callback */
		m_Listener->VendorSendCECommandCallback(args[0].v_uint32,
				args[1].v_uint32);
		QCC_DbgTrace(
				("VendorService::%s: Received Command %lu, la %lu", __FUNCTION__,args[0].v_uint32, args[1].v_uint32));
//		QCC_DbgTrace(
//				("VendorService::%s: Received Command %s", __FUNCTION__,ceKeycodes.CEKeycodeString((CEKeyCodes::keys)args[0].v_uint32).c_str()));
		if (status != ER_OK)
		{
			MethodReply(msg, status);
			return;
		}
		else
		{
			MethodReply(msg, status);
			return;
		}
	}
	else
	{
		MethodReply(msg, ER_INVALID_DATA);
	}
}

QStatus VendorService::Get(const char*ifcName, const char*propName, MsgArg& val)
{
	QCC_DbgTrace(("VendorService::%s", __FUNCTION__));
	QStatus status = ER_BUS_NO_SUCH_PROPERTY;
	if (0 == strcmp(ifcName, VENDOR_INTERFACE_NAME))
	{
		if (0 == strcmp("Version", propName))
		{
			status = val.Set("q", VENDOR_SERVICE_VERSION);
		}
	}
	return status;
}
