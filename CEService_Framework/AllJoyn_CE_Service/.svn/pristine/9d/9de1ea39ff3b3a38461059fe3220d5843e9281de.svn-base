#include <alljoyn/vendor/VendorClient.h>
#include <alljoyn/vendor/LogModule.h>
#include <qcc/Debug.h>

using namespace ajn;
using namespace services;

static const char* VENDOR_OBJECT_PATH = "/VENDOR";
static const char* VENDOR_INTERFACE_NAME = "org.alljoyn.VENDOR";

VendorClient::VendorClient(ajn::BusAttachment& bus) :
		m_BusAttachment(&bus)
{
	QCC_DbgTrace(("VendorClient::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const InterfaceDescription* p_InterfaceDescription = NULL;
	p_InterfaceDescription = m_BusAttachment->GetInterface(
			VENDOR_INTERFACE_NAME);
	if (!p_InterfaceDescription)
	{
		InterfaceDescription* p_InterfaceDescription = NULL;
		status = m_BusAttachment->CreateInterface(VENDOR_INTERFACE_NAME,
				p_InterfaceDescription, false);
		if (p_InterfaceDescription && status == ER_OK)
		{
			do
			{
				status = p_InterfaceDescription->AddMethod(
						"VendorSendCECommand", "uu",
						NULL, "command,la");
				if (status != ER_OK)
				{
					break;
				}
				status = p_InterfaceDescription->AddProperty("Version", "q",
						PROP_ACCESS_READ);
				if (status != ER_OK)
				{
					break;
				}
				p_InterfaceDescription->Activate();
				return;
			} while (0);
		}
		QCC_DbgPrintf(
				("VendorClient::VendorClient - interface=[%s] could not be created. status=[%s]", VENDOR_INTERFACE_NAME, QCC_StatusText(status)));
	}
}

VendorClient::~VendorClient()
{
}

QStatus VendorClient::VendorSendCECommand(const char* busName,
		unsigned int command, unsigned int la, ajn::SessionId sessionId)
{
	QCC_DbgTrace(("VendorClient::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const InterfaceDescription* p_InterfaceDescription =
			m_BusAttachment->GetInterface(VENDOR_INTERFACE_NAME);
	if (!p_InterfaceDescription)
	{
		return ER_FAIL;
	}
	ProxyBusObject* proxyBusObj = new ProxyBusObject(*m_BusAttachment, busName,
			VENDOR_OBJECT_PATH, sessionId);
	if (!proxyBusObj)
	{
		return ER_FAIL;
	}
	do
	{
		status = proxyBusObj->AddInterface(*p_InterfaceDescription);
		if (status != ER_OK)
		{
			break;
		}

		Message replyMsg(*m_BusAttachment);
		MsgArg args[2];
		status = args[0].Set("u", command);
		if (status != ER_OK)
		{
			break;
		}
		status = args[1].Set("u", la);
		if (status != ER_OK)
		{
			break;
		}
		status = proxyBusObj->MethodCall(VENDOR_INTERFACE_NAME,
				"VendorSendCECommand", args, 2, replyMsg);
		if (status == ER_BUS_REPLY_IS_ERROR_MESSAGE)
		{
			qcc::String errorMessage;
			QCC_LogError(status,
					("GetCEData ::Error name=%s ErorrMessage=%s", replyMsg->GetErrorName(&errorMessage), errorMessage.c_str()));
		}
		if (status != ER_OK)
		{
			break;
		}

	} while (0);

	delete proxyBusObj;
	proxyBusObj = NULL;
	return status;
}

QStatus VendorClient::GetVersion(const char* busName, int& version,
		ajn::SessionId sessionId)
{
	QCC_DbgTrace(("VendorClient::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const InterfaceDescription* p_InterfaceDescription =
			m_BusAttachment->GetInterface(VENDOR_INTERFACE_NAME);
	if (!p_InterfaceDescription)
	{
		return ER_FAIL;
	}
	ProxyBusObject* proxyBusObj = new ProxyBusObject(*m_BusAttachment, busName,
			VENDOR_OBJECT_PATH, sessionId);
	if (!proxyBusObj)
	{
		return ER_FAIL;
	}
	MsgArg arg;
	if (ER_OK == proxyBusObj->AddInterface(*p_InterfaceDescription))
	{
		status = proxyBusObj->GetProperty(VENDOR_INTERFACE_NAME, "Version",
				arg);
		if (ER_OK == status)
		{
			version = arg.v_variant.val->v_int16;
		}
	}
	delete proxyBusObj;
	proxyBusObj = NULL;
	return status;
}
