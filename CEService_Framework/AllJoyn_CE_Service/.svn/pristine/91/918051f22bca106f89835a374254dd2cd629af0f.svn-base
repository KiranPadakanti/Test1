#ifndef _CESERVICE_H
#define _CESERVICE_H

#include <alljoyn/about/PropertyStore.h>
#include <alljoyn/BusObject.h>

namespace ajn
{
namespace services
{
/**
 * CEService is an AllJoyn BusObject that implements the org.alljoyn.CE standard interface.
 * Applications that provide AllJoyn IoE services use an instance of this class to receive
 * CE commands and send change notifications to connected alljoyn devices.
 */
class CEService: public ajn::BusObject
{
public:

	/**
	 *	Listener is a callback that is called by CEService implemented  by the application to provide system calls and control
	 *
	 */
	class Listener
	{
	public:
		/**
		 * @param[in] command CEC Command received ex: PLAY
		 */
		virtual QStatus SendCECommandCallback(unsigned int command) = 0;

		/**
		 *
		 */
		virtual ~Listener() = 0;
	};
	/**
	 * Construct an CEService.
	 * @param[in]  bus    BusAttachment instance associated with this CEService
	 */
	CEService(ajn::BusAttachment& bus, PropertyStore& store, Listener& listener,
			unsigned int deviceType, unsigned char *ksup);
	/**
	 * destructor
	 */
	virtual ~CEService()
	{
	}

	/**
	 * Register the CEService on the AllJoyn bus passing the port to be announced.
	 * @return status.
	 */
	QStatus Register();
	/**
	 * Unregister the CE service  from the bus
	 */
	void Unregister();

	/**
	 * Send or replace the org.alljoyn.CE.Notify sessionless signal.
	 *
	 * emit the notification signal.
	 *
	 * @return
	 * - ER_MANDATORY_FIELD_MISSING: Logs an error with specific field that has a problem.
	 */
	QStatus Notify();

private:
	/**
	 * Handles  SendCECommand method
	 * @param[in]  member
	 * @param[in]  msg reference of AllJoyn Message
	 */
	void SendCECommand(const ajn::InterfaceDescription::Member* member,
			ajn::Message& msg);

	/**
	 *	Handles  GetKSUP method
	 * @param[in]  member
	 * @param[in]  msg reference of AllJoyn Message
	 */
	void GetKSUP(const ajn::InterfaceDescription::Member* member,
			ajn::Message& msg);

	/**
	 * Handles the GetPropery request
	 * @param[in]  ifcName  interface name
	 * @param[in]  propName the name of the properly
	 * @param[in]  val reference of MsgArg out parameter.
	 * @return ER_OK if successful.
	 */
	QStatus Get(const char* ifcName, const char* propName, MsgArg& val);

	/**
	 * pointer of BusAttachment
	 */
	ajn::BusAttachment* m_BusAttachment;

	/**
	 * pointer of PropertyStore implementing the storage.
	 */
	PropertyStore* m_PropertyStore;

	/**
	 * pointer of Listener
	 */
	Listener* m_Listener;

	/**
	 *  stores the signal member initialized  in the Register(..)
	 */
	const ajn::InterfaceDescription::Member* m_NotifySignalMember;

	/**
	 *	Device Type
	 */
	unsigned int m_deviceType;

	/**
	 *	Keys supported, unsigned char array of 32 bytes
	 */
	unsigned char * m_ksup;

};
inline CEService::Listener::~Listener()
{
}

} /* namespace services */
} /* namespace ajn */

#endif /*_CESERVICE_H*/
