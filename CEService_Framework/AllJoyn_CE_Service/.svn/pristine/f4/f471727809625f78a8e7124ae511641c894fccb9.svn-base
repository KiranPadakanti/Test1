#include <algorithm>
#include <iostream>
#include <alljoyn/ce/CEService.h>
#include <alljoyn/ce/CEKeyCodes.h>
#include <alljoyn/BusAttachment.h>
#include <qcc/Debug.h>
#include <alljoyn/ce/LogModule.h>

#define CE_SERVICE_VERSION 1

using namespace ajn;
using namespace services;

static const char* CE_INTERFACE_NAME = "org.alljoyn.CE";

CEService::CEService(ajn::BusAttachment& bus, PropertyStore& store,
		Listener& listener, unsigned int deviceType, unsigned char ksup[]) :
		BusObject("/CE"), m_BusAttachment(&bus), m_PropertyStore(&store), m_Listener(
				&listener), m_NotifySignalMember(NULL), m_deviceType(
				deviceType), m_ksup(ksup)
{
	QCC_DbgTrace(("CEService::%s", __FUNCTION__));
	std::vector<qcc::String> v;
	v.push_back(CE_INTERFACE_NAME);
}

QStatus CEService::Register()
{
	QCC_DbgTrace(("CEService::%s", __FUNCTION__));
	QStatus status = ER_OK;

	InterfaceDescription* p_InterfaceDescription =
			const_cast<InterfaceDescription*>(m_BusAttachment->GetInterface(
					CE_INTERFACE_NAME));
	if (!p_InterfaceDescription)
	{
		status = m_BusAttachment->CreateInterface(CE_INTERFACE_NAME,
				p_InterfaceDescription, false);
		if (status != ER_OK)
		{
			return status;
		}

		if (!p_InterfaceDescription)
		{
			return ER_BUS_CANNOT_ADD_INTERFACE;
		}

		status = p_InterfaceDescription->AddMethod("SendCECommand", "u", NULL,
				"command");
		if (status != ER_OK)
		{
			return status;
		}

		status = p_InterfaceDescription->AddMethod("GetKSUP", NULL, "ay",
				"content");
		if (status != ER_OK)
		{
			return status;
		}

		status = p_InterfaceDescription->AddSignal("Notify", "quay",
				"version,deviceType,ksup", 0);
		if (status != ER_OK)
		{
			return status;
		}

		status = p_InterfaceDescription->AddProperty("Version", "q",
				(uint8_t) PROP_ACCESS_READ);
		if (status != ER_OK)
		{
			return status;
		}

		status = p_InterfaceDescription->AddProperty("DeviceType", "u",
				(uint8_t) PROP_ACCESS_READ);
		if (status != ER_OK)
		{
			return status;
		}
		p_InterfaceDescription->Activate();
	}

	status = AddInterface(*p_InterfaceDescription);
	if (status == ER_OK)
	{
		status =
				AddMethodHandler(
						p_InterfaceDescription->GetMember("SendCECommand"),
						static_cast<MessageReceiver::MethodHandler>(&CEService::SendCECommand));
		if (status != ER_OK)
		{
			return status;
		}

		status =
				AddMethodHandler(p_InterfaceDescription->GetMember("GetKSUP"),
						static_cast<MessageReceiver::MethodHandler>(&CEService::GetKSUP));
		if (status != ER_OK)
		{
			return status;
		}
		m_NotifySignalMember = p_InterfaceDescription->GetMember("Notify");
		assert(m_NotifySignalMember);
	}

	return (status == ER_BUS_IFACE_ALREADY_EXISTS) ? ER_OK : status;
}

void CEService::Unregister()
{
	QCC_DbgTrace(("CEService::%s", __FUNCTION__));
}

QStatus CEService::Notify()
{
	QCC_DbgTrace(("CEService::%s", __FUNCTION__));
	QStatus status = ER_OK;
	if (m_NotifySignalMember == NULL)
	{
		return ER_FAIL;
	}
	MsgArg notifyArgs[2];
	status = notifyArgs[0].Set("q", CE_SERVICE_VERSION);
	if (status != ER_OK)
	{
		return status;
	}
	status = notifyArgs[1].Set("u", m_deviceType);
	if (status != ER_OK)
	{
		return status;
	}
	status = notifyArgs[2].Set("ay", 32, m_ksup);
	if (status != ER_OK)
	{
		return status;
	}
	Message msg(*m_BusAttachment);
	uint8_t flags = ALLJOYN_FLAG_SESSIONLESS;
#if !defined(NDEBUG)
	for (int i = 0; i < 3; i++)
	{
		QCC_DbgPrintf(
				("notifyArgs[%d]=%s", i, notifyArgs[i].ToString().c_str()));
	}
#endif
	status = Signal(NULL, 0, *m_NotifySignalMember, notifyArgs, 3,
			(unsigned char) 0, flags);

	QCC_DbgPrintf(
			("Sent NotifySignal from %s  =%d", m_BusAttachment->GetUniqueName().c_str(), status));
	return status;

}

void CEService::SendCECommand(const ajn::InterfaceDescription::Member* member,
		ajn::Message& msg)
{
	QCC_DbgTrace(("CEService::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const ajn::MsgArg* args = 0;
	size_t numArgs = 0;
	msg->GetArgs(numArgs, args);
	if (numArgs == 1)
	{

		/* Application callback */
		m_Listener->SendCECommandCallback(args[0].v_uint32);
		CEKeyCodes ceKeycodes = CEKeyCodes();
		QCC_DbgTrace(
				("CEService::%s: Received Command %lu", __FUNCTION__,args[0].v_uint32));
		QCC_DbgTrace(
				("CEService::%s: Received Command %s", __FUNCTION__,ceKeycodes.CEKeycodeString((CEKeyCodes::keys)args[0].v_uint32).c_str()));
		if (status != ER_OK)
		{
			MethodReply(msg, status);
			return;
		}
		else
		{
			MethodReply(msg, status);
			return;
		}
	}
	else
	{
		MethodReply(msg, ER_INVALID_DATA);
	}
}

void CEService::GetKSUP(const ajn::InterfaceDescription::Member* member,
		ajn::Message& msg)
{
	QCC_DbgTrace(("CEService::%s", __FUNCTION__));
	const ajn::MsgArg* args;
	size_t numArgs;
	msg->GetArgs(numArgs, args);
	if (numArgs == 0)
	{
		ajn::MsgArg retargs[1];
		QStatus status = retargs[0].Set("ay", 32, m_ksup);
		if (status != ER_OK)
		{
			MethodReply(msg, status);
		}
		else
		{
			MethodReply(msg, retargs, 1);
		}
	}
	else
	{
		MethodReply(msg, ER_INVALID_DATA);
	}
}

QStatus CEService::Get(const char*ifcName, const char*propName, MsgArg& val)
{
	QCC_DbgTrace(("CEService::%s", __FUNCTION__));
	QStatus status = ER_BUS_NO_SUCH_PROPERTY;
	if (0 == strcmp(ifcName, CE_INTERFACE_NAME))
	{
		if (0 == strcmp("Version", propName))
		{
			status = val.Set("q", CE_SERVICE_VERSION);
		}
		else if (0 == strcmp("DeviceType", propName))
		{
			status = val.Set("u", m_deviceType);
		}
	}
	return status;
}
