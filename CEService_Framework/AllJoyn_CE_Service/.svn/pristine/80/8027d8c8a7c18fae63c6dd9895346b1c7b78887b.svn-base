#include <alljoyn/vendor/SessionListener.h>
#include <alljoyn/vendor/LogModule.h>
#include <iostream>

using namespace ajn;
using namespace services;
using namespace vendor;

AsyncSessionJoiner::AsyncSessionJoiner(const char* name,
		SessionJoinedCb callback) :
		m_Busname(""), m_Callback(callback)
{
	if (name)
	{
		m_Busname.assign(name);
	}
}

AsyncSessionJoiner::~AsyncSessionJoiner()
{

}

void AsyncSessionJoiner::JoinSessionCB(QStatus status, SessionId id,
		const SessionOpts& opts, void* context)
{
	if (status == ER_OK)
	{
		if (m_Callback)
		{
			m_Callback(m_Busname, id);
		}
	}
	else
	{
		std::cout << "JoinSessionCB(" << m_Busname.c_str()
				<< ") failed with status: " << QCC_StatusText(status)
				<< std::endl;
	}

	delete this;
}

SessionListenerImpl::SessionListenerImpl(qcc::String const& inServiceNAme,
		SessionLostCb callback) :
		mySessionID(0), serviceName(inServiceNAme), m_Callback(callback)
{

}

SessionListenerImpl::~SessionListenerImpl()
{

}

void SessionListenerImpl::SessionLost(ajn::SessionId sessionId,
		ajn::SessionListener::SessionLostReason reason)
{
	m_Callback(sessionId, reason);
}

