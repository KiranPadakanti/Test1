#include <iostream>
#include <alljoyn/ce/NotifyHandler.h>
#include <alljoyn/ce/LogModule.h>
#include <qcc/Debug.h>

using namespace ajn;
using namespace services;

NotifyHandler::NotifyHandler() :
		notifySignalMember(NULL)
{
	QCC_DbgTrace(("NotifyHandler::%s", __FUNCTION__));
}

void NotifyHandler::NotifySignalHandler(
		const ajn::InterfaceDescription::Member* member, const char* srcPath,
		ajn::Message& message)
{

	QCC_DbgTrace(("NotifyHandler::%s", __FUNCTION__));

	QCC_DbgPrintf(
			("received signal interface=%s method=%s", message->GetInterface(), message->GetMemberName()));

	if (strcmp(message->GetInterface(), "org.alljoyn.CE") != 0
			|| strcmp(message->GetMemberName(), "Notify") != 0)
	{
		QCC_DbgPrintf(("This is not the signal we are looking for"));
		return;
	}
	const ajn::MsgArg* args = 0;
	size_t numArgs = 0;
	QStatus status;
	message->GetArgs(numArgs, args);
	if (numArgs == 3)
	{
#if !defined(NDEBUG)
		for (int i = 0; i < 3; i++)
		{
			QCC_DbgPrintf(("args[%d]=%s", i, args[i].ToString().c_str()));
		}
#endif
		uint16_t version = 0;
		uint32_t deviceType = 0;
		unsigned char * ksup;
		size_t numVals;

		status = args[0].Get("q", &version);
		if (status != ER_OK)
		{
			return;
		}
		status = args[1].Get("u", &deviceType);
		if (status != ER_OK)
		{
			return;
		}
		status = args[2].Get("ay", &numVals, &ksup);
		if (status != ER_OK)
		{
			return;
		}

		Notify(version, deviceType, ksup, message->GetSender());
	}
}
