#include "CEServiceListenerImpl.h"
#include <alljoyn/ce/CEKeyCodes.h>
#include <alljoyn/CECTransport.h>

#include "sii_types.h"
#include "json.h"
#include "uda.h"

#include <iostream>

#define JSON_BUFFER 32
#define SEND_CMD "{ \"OPCODE\" : \"EVENT\", \"TYPE\" : \"CEC_COMMAND\" }"

using namespace ajn;
using namespace services;
extern bool_t udaStarted;

CEServiceListenerImpl::CEServiceListenerImpl(CommonBusListener& busListener,
		unsigned int la) :
		CEService::Listener(), m_BusListener(&busListener), m_la(la)
{
}

QStatus CEServiceListenerImpl::SendCECommandCallback(unsigned int command)
{
	char buf[JSON_BUFFER];
	struct json_object *sendJsonMesg;
	time_t rawtime;
	struct tm *timeinfo;
	unsigned int deviceId = 123;
	cec_command cecCommand;

	rawtime = time(NULL);
	timeinfo = localtime(&rawtime);

	CEKeyCodes ceKeycodes = CEKeyCodes();
	std::cout << "Received Command "
			<< ceKeycodes.CEKeycodeString((CEKeyCodes::keys) command).c_str()
			<< "(0x" << std::hex << command << ")" << std::endl;
	std::cout << "Logical Address: " << m_la << std::endl;
	if (udaStarted == true)
	{
		// Always sending the command from TV to destination.
		cecCommand.initiator = (cec_logical_address) CECDEVICE_TV;
		cecCommand.destination = (cec_logical_address) m_la;
		cecCommand.opcode = (cec_opcode) CEC_OPCODE_USER_CONTROL_PRESSED;
		cecCommand.parameters.size = 1;
		cecCommand.parameters.data[0] = command && 0xFF;
		cecCommand.opcode_set = 1;

		// Transmit command to Vendor Application
		//TransmitCommand(cecCommand);
		cecCommand.opcode = (cec_opcode) CEC_OPCODE_USER_CONTROL_PRESSED;
		// Transmit command to Vendor Application
		//TransmitCommand(cecCommand);

		sendJsonMesg = json_tokener_parse(SEND_CMD);

		sprintf(buf, "\"%x\"", command);
		json_object_object_add(sendJsonMesg, "COMMAND",
				json_tokener_parse(buf));

		sprintf(buf, "\"%x\"", deviceId);
		json_object_object_add(sendJsonMesg, "USERID", json_tokener_parse(buf));

		/* Adding logEvent time to place holder */
		strftime(buf, JSON_BUFFER, "\"%Y%m%d%H%M%S000\"", timeinfo);
		json_object_object_add(sendJsonMesg, "TIME", json_tokener_parse(buf));

		if (UdaAppLogData((char *) json_object_to_json_string(sendJsonMesg))
				!= UDA_STATUS_SUCCESS)
		{
			std::cout << "UdaLogData() failed \n" << std::endl;
		}
	}
	return ER_OK;
}

CEServiceListenerImpl::~CEServiceListenerImpl()
{

}
