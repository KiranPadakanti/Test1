/******************************************************************************
 *
 * Copyright 2008-2013, Silicon Image, Inc.  All rights reserved.
 * No part of this work may be reproduced, modified, distributed, transmitted,
 * transcribed, or translated into any language or computer format, in any form
 * or by any means without written permission of: Silicon Image, Inc., 1060
 * East Arques Avenue, Sunnyvale, California 94085
 *
 *****************************************************************************/
/**
 * @file cec_protocol.h
 *
 * @brief definitions for CEC packet protocol
 *
 *****************************************************************************/

#ifndef CEC_PROTOCOL_H_
#define CEC_PROTOCOL_H_

#include "sii_inline.h"

/** @brief format of message to board */
typedef struct
{
	uint8_t logicalAddress; /**< destination logical address */
	uint8_t dataLen; /**< number of bytes in below data field */
	const uint8_t *pData; /**< opcode and arguments */
} CecMessage_t;

/** @brief CEC device types */
/** The Enum values defined here should map with cec library header file */
typedef enum
{
	NCL_CEC_DEVICE_TYPE_NONE = 255,
	NCL_CEC_DEVICE_TYPE_TV = 0,
	NCL_CEC_DEVICE_TYPE_RECORDING_DEVICE = 1,
	NCL_CEC_DEVICE_TYPE_RESERVED = 2,
	NCL_CEC_DEVICE_TYPE_TUNER = 3,
	NCL_CEC_DEVICE_TYPE_PLAYBACK = 4,
	NCL_CEC_DEVICE_TYPE_AUDIO_SYSTEM = 5,
	NCL_CEC_DEVICE_TYPE_PURE_CEC_SWITCH = 6,
	NCL_CEC_DEVICE_TYPE_VIDEO_PROCESSOR = 7,
	NCL_CEC_DEVICE_TYPE_COUNT
} CecDeviceType_t;

/*****************************************************************************/
/** @brief Physical CEC Address */
typedef uint16_t CecPhysAddr_t;

/** @brief Logical CEC addresses */
typedef enum
{
	CEC_LOGADDR_TV = 0x00,
	CEC_LOGADDR_RECDEV1 = 0x01,
	CEC_LOGADDR_RECDEV2 = 0x02,
	CEC_LOGADDR_TUNER1 = 0x03, // STB1 in HDMI 1.3
	CEC_LOGADDR_PLAYBACK1 = 0x04, // DVD1 in HDMI 1.3
	CEC_LOGADDR_AUDSYS = 0x05,
	CEC_LOGADDR_TUNER2 = 0x06, // STB2 in HDMI 1.3
	CEC_LOGADDR_TUNER3 = 0x07, // STB3 in HDMI 1.3
	CEC_LOGADDR_PLAYBACK2 = 0x08, // DVD2 in HDMI 1.3
	CEC_LOGADDR_RECDEV3 = 0x09,
	CEC_LOGADDR_TUNER4 = 0x0A, // RES1 in HDMI 1.3
	CEC_LOGADDR_PLAYBACK3 = 0x0B, // RES2 in HDMI 1.3
	CEC_LOGADDR_RES3 = 0x0C,
	CEC_LOGADDR_RES4 = 0x0D,
	CEC_LOGADDR_FREEUSE = 0x0E,
	CEC_LOGADDR_UNREGORBC = 0x0F
} CecLogAddr_t;

/** @brief CEC opcodes */
typedef enum
{
	CECOP_FEATURE_ABORT = 0x00,
	CECOP_IMAGE_VIEW_ON = 0x04,
	CECOP_TUNER_STEP_INCREMENT = 0x05, // N/A
	CECOP_TUNER_STEP_DECREMENT = 0x06, // N/A
	CECOP_TUNER_DEVICE_STATUS = 0x07, // N/A
	CECOP_GIVE_TUNER_DEVICE_STATUS = 0x08, // N/A
	CECOP_RECORD_ON = 0x09, // N/A
	CECOP_RECORD_STATUS = 0x0A, // N/A
	CECOP_RECORD_OFF = 0x0B, // N/A
	CECOP_TEXT_VIEW_ON = 0x0D,
	CECOP_RECORD_TV_SCREEN = 0x0F, // N/A
	CECOP_GIVE_DECK_STATUS = 0x1A,
	CECOP_DECK_STATUS = 0x1B,
	CECOP_SET_MENU_LANGUAGE = 0x32,
	CECOP_CLEAR_ANALOGUE_TIMER = 0x33, // Spec 1.3A
	CECOP_SET_ANALOGUE_TIMER = 0x34, // Spec 1.3A
	CECOP_TIMER_STATUS = 0x35, // Spec 1.3A
	CECOP_STANDBY = 0x36,
	CECOP_PLAY = 0x41,
	CECOP_DECK_CONTROL = 0x42,
	CECOP_TIMER_CLEARED_STATUS = 0x43, // Spec 1.3A
	CECOP_USER_CONTROL_PRESSED = 0x44,
	CECOP_USER_CONTROL_RELEASED = 0x45,
	CECOP_GIVE_OSD_NAME = 0x46,
	CECOP_SET_OSD_NAME = 0x47,
	CECOP_SET_OSD_STRING = 0x64,
	CECOP_SET_TIMER_PROGRAM_TITLE = 0x67, // Spec 1.3A
	CECOP_SYSTEM_AUDIO_MODE_REQUEST = 0x70, // Spec 1.3A
	CECOP_GIVE_AUDIO_STATUS = 0x71, // Spec 1.3A
	CECOP_SET_SYSTEM_AUDIO_MODE = 0x72, // Spec 1.3A
	CECOP_REPORT_AUDIO_STATUS = 0x7A, // Spec 1.3A
	CECOP_GIVE_SYSTEM_AUDIO_MODE_STATUS = 0x7D, // Spec 1.3A
	CECOP_SYSTEM_AUDIO_MODE_STATUS = 0x7E, // Spec 1.3A
	CECOP_ROUTING_CHANGE = 0x80,
	CECOP_ROUTING_INFORMATION = 0x81,
	CECOP_ACTIVE_SOURCE = 0x82,
	CECOP_GIVE_PHYSICAL_ADDRESS = 0x83,
	CECOP_REPORT_PHYSICAL_ADDRESS = 0x84,
	CECOP_REQUEST_ACTIVE_SOURCE = 0x85,
	CECOP_SET_STREAM_PATH = 0x86,
	CECOP_DEVICE_VENDOR_ID = 0x87,
	CECOP_VENDOR_COMMAND = 0x89,
	CECOP_VENDOR_REMOTE_BUTTON_DOWN = 0x8A,
	CECOP_VENDOR_REMOTE_BUTTON_UP = 0x8B,
	CECOP_GIVE_DEVICE_VENDOR_ID = 0x8C,
	CECOP_MENU_REQUEST = 0x8D,
	CECOP_MENU_STATUS = 0x8E,
	CECOP_GIVE_DEVICE_POWER_STATUS = 0x8F,
	CECOP_REPORT_POWER_STATUS = 0x90,
	CECOP_GET_MENU_LANGUAGE = 0x91,
	CECOP_SELECT_ANALOGUE_SERVICE = 0x92, // Spec 1.3A    N/A
	CECOP_SELECT_DIGITAL_SERVICE = 0x93, //              N/A
	CECOP_SET_DIGITAL_TIMER = 0x97, // Spec 1.3A
	CECOP_CLEAR_DIGITAL_TIMER = 0x99, // Spec 1.3A
	CECOP_SET_AUDIO_RATE = 0x9A, // Spec 1.3A
	CECOP_INACTIVE_SOURCE = 0x9D, // Spec 1.3A
	CECOP_CEC_VERSION = 0x9E, // Spec 1.3A
	CECOP_GET_CEC_VERSION = 0x9F, // Spec 1.3A
	CECOP_VENDOR_COMMAND_WITH_ID = 0xA0, // Spec 1.3A
	CECOP_CLEAR_EXTERNAL_TIMER = 0xA1, // Spec 1.3A
	CECOP_SET_EXTERNAL_TIMER = 0xA2, // Spec 1.3A
	CDCOP_HEADER = 0xF8,
	CECOP_ABORT = 0xFF,

	CECOP_REPORT_SHORT_AUDIO = 0xA3, // Spec 1.4
	CECOP_REQUEST_SHORT_AUDIO = 0xA4, // Spec 1.4

	CECOP_INITIATE_ARC = 0xC0,
	CECOP_REPORT_ARC_INITIATED = 0xC1,
	CECOP_REPORT_ARC_TERMINATED = 0xC2,

	CECOP_REQUEST_ARC_INITIATION = 0xC3,
	CECOP_REQUEST_ARC_TERMINATION = 0xC4,
	CECOP_TERMINATE_ARC = 0xC5,
} CecOpcode_t;

/** @brief Operand for CECOP_DECK_CONTROL opcode */
typedef enum
{
	CEC_DECKCONTROL_SKIP_FWD = 0x01,
	CEC_DECKCONTROL_SKIP_BACK = 0x02,
	CEC_DECKCONTROL_STOP = 0x03,
	CEC_DECKCONTROL_EJECT = 0x04
} CecDeckcontrol_t;

/** @brief Operand for CECOP_PLAY opcode (CEC Table 29) */
typedef enum
{
	CEC_PLAY_SCAN_FWD_MIN = 0x05,
	CEC_PLAY_SCAN_FWD_MED = 0x06,
	CEC_PLAY_SCAN_FWD_MAX = 0x07,
	CEC_PLAY_SCAN_REV_MIN = 0x09,
	CEC_PLAY_SCAN_REV_MED = 0x0A,
	CEC_PLAY_SCAN_REV_MAX = 0x0B,
	CEC_PLAY_SLOW_FWD_MIN = 0x15,
	CEC_PLAY_SLOW_FWD_MED = 0x16,
	CEC_PLAY_SLOW_FWD_MAX = 0x17,
	CEC_PLAY_SLOW_REV_MIN = 0x19,
	CEC_PLAY_SLOW_REV_MED = 0x1A,
	CEC_PLAY_SLOW_REV_MAX = 0x1B,
	CEC_PLAY_REVERSE = 0x20,
	CEC_PLAY_FORWARD = 0x24,
	CEC_PLAY_STILL = 0x25
} CecPlay_t;

/** @brief User control codes (CEC Table 30) */
typedef enum
{
	CEC_RC_SELECT = 0x00,
	CEC_RC_UP = 0x01,
	CEC_RC_DOWN = 0x02,
	CEC_RC_LEFT = 0x03,
	CEC_RC_RIGHT = 0x04,
	CEC_RC_RIGHT_UP = 0x05,
	CEC_RC_RIGHT_DOWN = 0x06,
	CEC_RC_LEFT_UP = 0x07,
	CEC_RC_LEFT_DOWN = 0x08,
	CEC_RC_ROOT_MENU = 0x09,
	CEC_RC_SETUP_MENU = 0x0A,
	CEC_RC_CONTENTS_MENU = 0x0B,
	CEC_RC_FAVORITE_MENU = 0x0C,
	CEC_RC_EXIT = 0x0D,
	// 0x0E - 0x0F Reserved
	CEC_RC_MEDIA_TOP_MENU = 0x10,
	CEC_RC_MEDIA_CXT_SEN_MENU = 0x11,
	// 0x12 - 0x1C Reserved
	CEC_RC_NUM_ENTRY_MODE = 0x1D,
	CEC_RC_11 = 0x1E,
	CEC_RC_12 = 0x1F,
	CEC_RC_0 = 0x20,
	CEC_RC_1 = 0x21,
	CEC_RC_2 = 0x22,
	CEC_RC_3 = 0x23,
	CEC_RC_4 = 0x24,
	CEC_RC_5 = 0x25,
	CEC_RC_6 = 0x26,
	CEC_RC_7 = 0x27,
	CEC_RC_8 = 0x28,
	CEC_RC_9 = 0x29,
	CEC_RC_DOT = 0x2A,
	CEC_RC_ENTER = 0x2B,
	CEC_RC_CLEAR = 0x2C,
	// 0x2D - 0x2E Reserved
	CEC_RC_NEXT_FAVORITE = 0x2F,
	CEC_RC_CHANNEL_UP = 0x30,
	CEC_RC_CHANNEL_DOWN = 0x31,
	CEC_RC_PREVIOUS_CHANNEL = 0x32,
	CEC_RC_SOUND_SELECT = 0x33,
	CEC_RC_INPUT_SELECT = 0x34,
	CEC_RC_DISPLAY_INFORMATION = 0x35,
	CEC_RC_HELP = 0x36,
	CEC_RC_PAGE_UP = 0x37,
	CEC_RC_PAGE_DOWN = 0x38,
	// 0x39 - 0x3F Reserved
	CEC_RC_POWER = 0x40,
	CEC_RC_VOLUME_UP = 0x41,
	CEC_RC_VOLUME_DOWN = 0x42,
	CEC_RC_MUTE = 0x43,
	CEC_RC_PLAY = 0x44,
	CEC_RC_STOP = 0x45,
	CEC_RC_PAUSE = 0x46,
	CEC_RC_RECORD = 0x47,
	CEC_RC_REWIND = 0x48,
	CEC_RC_FAST_FORWARD = 0x49,
	CEC_RC_EJECT = 0x4A,
	CEC_RC_FORWARD = 0x4B,
	CEC_RC_BACKWARD = 0x4C,
	CEC_RC_STOP_RECORD = 0x4D,
	CEC_RC_PAUSE_RECORD = 0x4E,
	// 0x4F Reserved
	CEC_RC_ANGLE = 0x50,
	CEC_RC_SUB_PICTURE = 0x51,
	CEC_RC_VOD = 0x52,
	CEC_RC_ELEC_PROGRAM_GUIDE = 0x53,
	CEC_RC_TIMER_PROGRAM = 0x54,
	CEC_RC_INITIAL_CONFIG = 0x55,
	CEC_RC_BROADCAST_TYPE = 0x56,
	CEC_RC_SOUND_PRES = 0x57,
	// 0x58 - 0x5F Reserved
	CEC_RC_PLAY_FUNCTION = 0x60,
	CEC_RC_PAUSE_PLAY_FUNCTION = 0x61,
	CEC_RC_RECORD_FUNCTION = 0x62,
	CEC_RC_PAUSE_RECORD_FUNCTION = 0x63,
	CEC_RC_STOP_FUNCTION = 0x64,
	CEC_RC_MUTE_FUNCTION = 0x65,
	CEC_RC_RESTORE_VOLUME_FUNCTION = 0x66,
	CEC_RC_TUNE_FUNCTION = 0x67,
	CEC_RC_SELECT_DISK_FUNCTION = 0x68,
	CEC_RC_SELECT_AV_INPUT_FUNCTION = 0x69,
	CEC_RC_SELECT_AUDIO_INPUT_FUNCTION = 0x6A,
	CEC_RC_POWER_TOGGLE = 0x6B,
	CEC_RC_POWER_OFF = 0x6C,
	CEC_RC_POWER_ON = 0x6D,
	// 0x6E - 0x70 Reserved
	CEC_RC_F1_BLUE = 0x71,
	CEC_RC_F2_RED = 0x72,
	CEC_RC_F3_GREEN = 0x73,
	CEC_RC_F4_YELLOW = 0x74,
	CEC_RC_F5 = 0x75,
	CEC_RC_DATA = 0x76,
	CEC_RC_ONE_TOUCH_PLAY = 0x90
// 0x77 - 0x8F Reserved
} CecRc_t;

static SII_INLINE const char * CecDeviceTypeToString(uint8_t devtype)
{
	switch (devtype)
	{
		case NCL_CEC_DEVICE_TYPE_NONE:
			return "NCL_CEC_DEVICE_TYPE_NONE";
		case NCL_CEC_DEVICE_TYPE_TV:
			return "NCL_CEC_DEVICE_TYPE_TV";
		case NCL_CEC_DEVICE_TYPE_RECORDING_DEVICE:
			return "NCL_CEC_DEVICE_TYPE_RECORDING_DEVICE";
		case NCL_CEC_DEVICE_TYPE_RESERVED:
			return "NCL_CEC_DEVICE_TYPE_RESERVED";
		case NCL_CEC_DEVICE_TYPE_TUNER:
			return "NCL_CEC_DEVICE_TYPE_TUNER";
		case NCL_CEC_DEVICE_TYPE_PLAYBACK:
			return "NCL_CEC_DEVICE_TYPE_PLAYBACK";
		case NCL_CEC_DEVICE_TYPE_AUDIO_SYSTEM:
			return "NCL_CEC_DEVICE_TYPE_AUDIO_SYSTEM";
		case NCL_CEC_DEVICE_TYPE_PURE_CEC_SWITCH:
			return "NCL_CEC_DEVICE_TYPE_PURE_CEC_SWITCH";
		case NCL_CEC_DEVICE_TYPE_VIDEO_PROCESSOR:
			return "NCL_CEC_DEVICE_TYPE_VIDEO_PROCESSOR";
		default:
			return "UNKNOWN";
	}
}

static SII_INLINE const char * CecLogDeviceToString(uint8_t la)
{
	switch (la)
	{
		case CEC_LOGADDR_TV:
			return "CEC_LOGADDR_TV";
		case CEC_LOGADDR_RECDEV1:
			return "CEC_LOGADDR_RECDEV1";
		case CEC_LOGADDR_RECDEV2:
			return "CEC_LOGADDR_RECDEV2";
		case CEC_LOGADDR_TUNER1:
			return "CEC_LOGADDR_TUNER1";
		case CEC_LOGADDR_PLAYBACK1:
			return "CEC_LOGADDR_PLAYBACK1";
		case CEC_LOGADDR_AUDSYS:
			return "CEC_LOGADDR_AUDSYS";
		case CEC_LOGADDR_TUNER2:
			return "CEC_LOGADDR_TUNER2";
		case CEC_LOGADDR_TUNER3:
			return "CEC_LOGADDR_TUNER3";
		case CEC_LOGADDR_PLAYBACK2:
			return "CEC_LOGADDR_PLAYBACK2";
		case CEC_LOGADDR_RECDEV3:
			return "CEC_LOGADDR_RECDEV3";
		case CEC_LOGADDR_TUNER4:
			return "CEC_LOGADDR_TUNER4";
		case CEC_LOGADDR_PLAYBACK3:
			return "CEC_LOGADDR_PLAYBACK3";
		case CEC_LOGADDR_RES3:
			return "CEC_LOGADDR_RES3";
		case CEC_LOGADDR_RES4:
			return "CEC_LOGADDR_RES4";
		case CEC_LOGADDR_FREEUSE:
			return "CEC_LOGADDR_FREEUSE";
		case CEC_LOGADDR_UNREGORBC:
			return "CEC_LOGADDR_UNREGORBC";
		default:
			return "UNKNOWN";
	}
}

#endif /* CEC_PROTOCOL_H_ */
