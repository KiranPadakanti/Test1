/**
 * @file
 * Transport is an abstract base class implemented by physical
 * media interfaces such as TCP, UNIX, Local and Bluetooth.
 */

/******************************************************************************
 * Copyright (c) 2009-2012, AllSeen Alliance. All rights reserved.
 *
 *    Permission to use, copy, modify, and/or distribute this software for any
 *    purpose with or without fee is hereby granted, provided that the above
 *    copyright notice and this permission notice appear in all copies.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 ******************************************************************************/
#ifndef _ALLJOYN_CEC_TRANSPORT_H
#define _ALLJOYN_CEC_TRANSPORT_H

#ifndef __cplusplus
#error Only include Transport.h in C++ code.
#endif

#include <fcntl.h>
#include <signal.h>

#include <qcc/platform.h>
#include <qcc/String.h>
#include <map>
#include <vector>
#include <alljoyn/Message.h>
#include <alljoyn/TransportMask.h>
#include <alljoyn/Session.h>
#include <alljoyn/Status.h>

#include <iostream>
using namespace std;
using namespace qcc;

#include <qcc/cec.h>
//#include <qcc/cecloader.h>
#include <qcc/cectypes.h>
#include <qcc/Thread.h>

#define CEC_CONFIG_VERSION CEC_CLIENT_VERSION_CURRENT;

using namespace CEC;

typedef void (*CecIoCallbackFunc_t)(cec_command command);
typedef void (*CecIoEnumChangedCallbackFunc_t)(uint16_t enumVec);

typedef void (*AddDevicecallbackFunc_t)(cec_logical_address la);
typedef void (*DeleteDevicecallbackFunc_t)(cec_logical_address la);

namespace ajn {

class CECTransport {

private: 
	static bool instanceFlag;		 
	static bool libCecInitFlag;
	static CECTransport *cecInstance; 

public:
	libcec_configuration g_config;
	ICECCallbacks        g_callbacks;
	ICECAdapter	     *parser;

	CecIoCallbackFunc_t gCecIoCallbackFunc = NULL;
	AddDevicecallbackFunc_t gAddDeviceCallbackFunc = NULL;
	DeleteDevicecallbackFunc_t gDeleteDeviceCallbackFunc = NULL;

	Thread *cecThread;
	bool stopThread;
	int pollTime;
	bool devStatus[15];

	static CECTransport* getCecInstance();
	QStatus CecInit();
    QStatus CecTerm();
	void SetPollInterval(int timeinms);
    QStatus CecIoRegisterRecvCecMesgCallback(CecIoCallbackFunc_t callbackFunc);
	QStatus RegisterAddDeviceCallback(AddDevicecallbackFunc_t callbackFunc);
	QStatus RegisterDeleteDeviceCallback(DeleteDevicecallbackFunc_t callbackFunc);
	QStatus SendCecMesg(cec_command command);
	QStatus GetCecVersion(cec_logical_address dest, cec_version *versionPtr);

	void CecIoEnumeration(void);

};

}

#endif

