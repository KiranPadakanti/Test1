/****************************************************************************
 *
 * Copyright 2008-2013, Silicon Image, Inc.  All rights reserved.
 * No part of this work may be reproduced, modified, distributed, transmitted,
 * transcribed, or translated into any language or computer format, in any form
 * or by any means without written permission of: Silicon Image, Inc., 1060
 * East Arques Avenue, Sunnyvale, California 94085
 *
 ******************************************************************************/
/**
 * @file os_dmls.h
 *
 * API of the debug output functions of the OSAL layer.
 *
 * DMLS (Debug Message Logging System) uses channels to route log messages
 * into different categories which will make it easy to filter log messages
 * of interest.
 *
 * Don't use source control directives!
 * Don't use source control directives!
 * Don't use source control directives!
 *
 *****************************************************************************/

#ifndef _OS_DMLS_H
#define	_OS_DMLS_H

/** \addtogroup OSAL OS Abstraction Layer
 * @{
 * This provides the Abstraction Layer interface between ULMUS and OS library
 */

#include "sii_types.h"
#include "os_types.h"

#define SII_OS_DEBUG_FORMAT_SIMPLE       0x0001u   /*There is no additional text appended to the message string when it's output. default state */
#define SII_OS_DEBUG_FORMAT_FILEINFO     0x0002u   /*preceded with the filename/line-number information logged agains each debug message */
#define SII_OS_DEBUG_FORMAT_CHANNEL      0x0004u   /*preceded with a channel string supplied by the pChannelToString() function specified at initialization time */
#define SII_OS_DEBUG_FORMAT_TIMESTAMP    0x0008u   /*preceded with milisecond time stamp information logged against each debug message */
#define SII_OS_DEBUG_FORMAT_TASKINFO     0x0010u   /*preceded with process id and thread id logged against each debug message */

/* Macros for defining and testing status values */
#define SII_OS_DEBUG_GROUP_MASK     0x00FF0000
#define SII_OS_DEBUG_GROUP_SHIFT    16
#define SII_OS_DEBUG_MODULE_MASK    0x0000FF00
#define SII_OS_DEBUG_MODULE_SHIFT   8
#define SII_OS_DEBUG_LEVEL_MASK     0x000000FF
#define SII_OS_DEBUG_LEVEL_SHIFT    0

#define SII_OS_DEBUG_CHANNEL_VALUE(group, module, level)                \
    ((((group)  << SII_OS_DEBUG_GROUP_SHIFT)  & SII_OS_DEBUG_GROUP_MASK) | \
     (((module) << SII_OS_DEBUG_MODULE_SHIFT) & SII_OS_DEBUG_MODULE_MASK) | \
     (((level)  << SII_OS_DEBUG_LEVEL_SHIFT)  & SII_OS_DEBUG_LEVEL_MASK))

#define SII_OS_DEBUG_CHANNEL_GET_LEVEL(value)                           \
    (((value) & SII_OS_DEBUG_LEVEL_MASK) >> SII_OS_DEBUG_LEVEL_SHIFT)

typedef enum
{
	SII_OS_DEBUG_LEVEL_NONE = 0x00,
	SII_OS_DEBUG_LEVEL_ERR = 0x01,
	SII_OS_DEBUG_LEVEL_WRN = 0x02,
	SII_OS_DEBUG_LEVEL_DBG = 0x03,
	SII_OS_DEBUG_LEVEL_TRC = 0x04,
	SII_OS_DEBUG_LEVEL_USER1 = 0x05,
	SII_OS_DEBUG_LEVEL_USER2 = 0x06,
	SII_OS_DEBUG_LEVEL_USER3 = 0x07,
	SII_OS_DEBUG_LEVEL_LOG = 0x08,
	SII_OS_DEBUG_LEVEL_LAST
} SiiOsDebugLevel_t;

#define OS_DMLS_OFF 0
#define OS_DMLS_DIRECT 1

#if !defined(OS_DMLS_MODE)
#define OS_DMLS_MODE OS_DMLS_DIRECT
#endif

/** @brief Debug Channel structure */
typedef struct _SiiOsDebugChannel_t
{
	/** Channel number */
	uint32_t channel;
	/** Channel name */
	char *channelname;

} SiiOsDebugChannel_t;

#if (OS_DMLS_MODE == OS_DMLS_DIRECT)

#define SII_OS_DEBUG_INITIALIZE_DMLS(maxChannels) SiiOsDebugInit((uint32_t)maxChannels)
#define SII_OS_DEBUG_DESTROY_DMLS() SiiOsDebugTerm()

#if (__STDC_VERSION__ >= 199901L)
#define SII_OS_DEBUG_PRINT(channel, pFormat, ...) \
        SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, ## __VA_ARGS__)
#else
/*lint -save -e16 -e10 */
#ifndef WIN32
#warning "SII_OS_DEBUG_PRINT macro only supported in C99; macro set to empty"
#endif
/*lint -restore */
#define SII_OS_DEBUG_PRINT(channel, pFormat, ...)
#endif

#define SII_OS_DEBUG_PRINT0(channel, pFormat) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat)

#define SII_OS_DEBUG_PRINT1(channel, pFormat, arg1) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1)

#define SII_OS_DEBUG_PRINT2(channel, pFormat, arg1, arg2) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1, arg2)

#define SII_OS_DEBUG_PRINT3(channel, pFormat, arg1, arg2, arg3) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1, arg2, arg3)

#define SII_OS_DEBUG_PRINT4(channel, pFormat, arg1, arg2, arg3, arg4) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1, arg2, arg3, arg4)

#define SII_OS_DEBUG_PRINT5(channel, pFormat, arg1, arg2, arg3, arg4, arg5) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1, arg2, arg3, arg4, arg5)

#define SII_OS_DEBUG_PRINT6(channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6)

#define SII_OS_DEBUG_PRINT7(channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7)

#define SII_OS_DEBUG_PRINT8(channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

#define SII_OS_DEBUG_PRINT9(channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) \
    SiiOsDebugPrint((char *) __FILE__, (uint32_t) __LINE__, (uint32_t) channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

#if !defined(SII_OS_DEBUG_ASSERT)
#define SII_OS_DEBUG_ASSERT(assertionCondition) \
    do \
    { \
    int misra_temp = (assertionCondition); \
    SiiOsDebugAssert(__FILE__, (uint32_t) __LINE__, misra_temp, #assertionCondition); \
    } \
    while(0)
#endif

#define SII_OS_DEBUG_CHANNEL_ADD(numChannels, paChannelList) SiiOsDebugChannelAdd((uint32_t)numChannels, (SiiOsDebugChannel_t *)paChannelList)

#define SII_OS_DEBUG_CHANNEL_ENABLE(channel) SiiOsDebugChannelEnable(channel)
#define SII_OS_DEBUG_CHANNEL_DISABLE(channel) SiiOsDebugChannelDisable(channel)

#define SII_OS_DEBUG_CONFIGURE(flags) SiiOsDebugConfig(flags)

/* DMLS is switched off */
#else

#define SII_OS_DEBUG_INITIALIZE_DMLS(maxChannels) SiiOsDebugInit((uint32_t)maxChannels)

#define SII_OS_DEBUG_DESTROY_DMLS()

#define SII_OS_DEBUG_CHANNEL_ENABLE(channel)
#define SII_OS_DEBUG_CHANNEL_DISABLE(channel)

#define SII_OS_DEBUG_CHANNEL_ADD(numChannels, paChannelList) SiiOsDebugChannelAdd((uint32_t)numChannels, (SiiOsDebugChannel_t *)paChannelList)

#define SII_OS_DEBUG_CONFIGURE(flags)

#define SII_OS_DEBUG_PRINT(channel, pFormat, ...) 
#define SII_OS_DEBUG_PRINT0(channel, pFormat)
#define SII_OS_DEBUG_PRINT1(channel, pFormat, arg1)
#define SII_OS_DEBUG_PRINT2(channel, pFormat, arg1, arg2)
#define SII_OS_DEBUG_PRINT3(channel, pFormat, arg1, arg2, arg3)
#define SII_OS_DEBUG_PRINT4(channel, pFormat, arg1, arg2, arg3, arg4)
#define SII_OS_DEBUG_PRINT5(channel, pFormat, arg1, arg2, arg3, arg4, arg5)
#define SII_OS_DEBUG_PRINT6(channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6)
#define SII_OS_DEBUG_PRINT7(channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
#define SII_OS_DEBUG_PRINT8(channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
#define SII_OS_DEBUG_PRINT9(channel, pFormat, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

#define SII_OS_DEBUG_ASSERT(assertionCondition)

#endif /* OS_DMLS_MODE */

/**
 *  @name DMLS
 *  @{
 **/
/************************************************************************//**
 *
 * @brief Adds the debug channels to debug print system (public API)
 *
 * @param[in] numChannels      number of valid entries in paChannelList array
 * @param[in] paChannelList   pointer to an array of debug channels
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS                no error
 * @retval SII_OS_STATUS_ERR_INVALID_PARAM      numChannels == 0 or paChannelList is NULL
 * @retval SII_OS_STATUS_ERR_IN_USE             if a channel value in paChannelList
 *                                              conflicts with an existing channel
 * @retval SII_OS_STATUS_ERR_NOT_AVAIL          if the maximum number of channels
 *                                              has been exceeded
 *
 * @note Cannot be used from ISR.
 * @note This function shall do nothing and return SII_OS_STATUS_SUCCESS for
 *       non-debug builds
 * @note Any channel values which have not been added by a call to this function
 *       will be ignored by calls to other SiiOsDebugXxx functions.
 * @note Debug output for all channels is disabled by default
 *
 ******************************************************************************/
SiiOsStatus_t SiiOsDebugChannelAdd(uint32_t numChannels,
		SiiOsDebugChannel_t *paChannelList);

/************************************************************************//**
 *
 * @brief Enables debug print messages for the channel specified (public API)
 *
 * @param[in] channel   output channel for which messages will be printed
 *
 * @note Cannot be used from ISR.
 * @note All message output on this channel will be enabled until
 *       SiiOsDebugChannelDisable() is called for the same channel.
 * @note If channel does not match a value in an array previously passed to
 *       SiiOsDebugChannelAdd(), it is ignored and no action is taken.
 * @note This function shall be empty for non-debug builds
 *
 ******************************************************************************/
void SiiOsDebugChannelEnable(uint32_t channel);

/************************************************************************//**
 *
 * @brief Disables debug print messages for the channel specified (public API)
 *
 * @param[in] channel   output channel for which messages will no longer be printed
 *
 * @note Cannot be used from ISR.
 * @note All message output on this channel will be disabled until
 *       SiiOsDebugChannelEnable() is called for the same channel.
 * @note If channel does not match a value in an array previously passed to
 *       SiiOsDebugChannelAdd(), it is ignored and no action is taken.
 * @note This function shall be empty for non-debug builds
 *
 ******************************************************************************/
void SiiOsDebugChannelDisable(uint32_t channel);

/************************************************************************//**
 *
 * @brief Outputs the specified debug message (public API)
 *
 * @param[in] pFileName   string indicating file name and extension of calling module
 * @param[in] lineNumber  line number of function call within the calling module
 * @param[in] channel     output channel for which the message will be printed
 * @param[in] pFormat      a 'printf-compliant format specifier string used to
 *                        define the output text content. This is optionally followed
 *                        by a variable argument list in accordance with normal
 *                        conventions.
 *
 * @note Outputs the specified debug message if the channel has been enabled by a
 *       previous call to SiiOsDebugChannelEnable().
 * @note The output format is determined by the pFormat string and the configuration
 *       flags enabled by SiiOsDebugConfig()
 * @note This function shall be empty for non-debug builds
 *
 ******************************************************************************/
void SiiOsDebugPrint(const char *pFileName, uint32_t lineNumber,
		uint32_t channel, const char *pFormat, ...);

/************************************************************************//**
 *
 * @brief Specifies the format of text messages generated for debug output (public API)
 *
 * @param[in] flags   bit-mask representing various configuration settings relating
 *                    to the output format for all debug channels
 *
 * @note This function shall be empty for non-debug builds
 * @note Cannot be used from ISR.
 *
 ******************************************************************************/
void SiiOsDebugConfig(uint16_t flags);

/************************************************************************//**
 *
 * @brief Underlying function aliased to the SII_OS_DEBUG_ASSERT() macro
 *
 * @param[in] pFileName                string indicating file name and
 *                                     extension of calling module
 * @param[in] lineNumber               line number of function call
 *                                     within the calling module
 * @param[in] expressionEvaluation     the numerical equivalent of the evaluated
 *                                     assertion condition. If passed a non-zero
 *                                     then it is assumed the assertion has passed
 *                                     - only a zero value indicates the assertion
 *                                     failed
 * @param[in] pConditionText           a string representation of the assertion
 *                                     condition statement. This string is passed
 *                                     as debug output with additional information
 *
 * @note Cannot be used from ISR.
 *
 ******************************************************************************/
void SiiOsDebugAssert(const char *pFileName, uint32_t lineNumber,
		uint32_t expressionEvaluation, const char *pConditionText);

/************************************************************************//**
 *
 * @brief Installs system assertion handler routine(Public API)
 *
 * @param[in] pHandler      pointer to the Assertion handler routine
 * @param[in] pArg          This argument is passed to the assertion handler
 *                          routine
 *
 * @note Cannot be used from ISR.
 *
 ******************************************************************************/
void SiiOsDebugInstallAssertHandler(void(*pHandler)(void *pArg), void *pArg);

SiiOsStatus_t SiiOsDebugLogInit(void);
SiiOsStatus_t SiiOsDebugSetLogConfigParams(char *pLogFilePath, uint8_t logFileSize, uint8_t logFileCount);

/** @}*//* DMLS */
/** @}*/ /* OS Abstraction Layer */

#endif	/* _OS_DMLS_H */

