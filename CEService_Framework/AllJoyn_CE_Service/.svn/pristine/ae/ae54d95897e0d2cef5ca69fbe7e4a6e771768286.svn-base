/******************************************************************************
 *
 * Copyright 2013, Silicon Image, Inc.  All rights reserved.
 * No part of this work may be reproduced, modified, distributed, transmitted,
 * transcribed, or translated into any language or computer format, in any form
 * or by any means without written permission of: Silicon Image, Inc., 1060
 * East Arques Avenue, Sunnyvale, California 94085
 *
 *****************************************************************************/
/**
 * @file platform_types.h
 *
 * @brief Common type definitions for platform library
 *
 *****************************************************************************/

#ifndef PLATFORM_TYPES_H
#define PLATFORM_TYPES_H

#include "sii_types.h"
#include "sii_ids.h"

#ifdef __cplusplus
extern "C"
{
#endif  /* __cplusplus */

/***** macro definitions *****************************************************/
#ifndef SII_PLATFORM_INLINE
#define SII_PLATFORM_INLINE
#endif

/*****************************************************************************/
/**
 * Module names for debugging
 *****************************************************************************/
typedef enum
{
	ModPalUpnp = 1, ModPalCec
	// add new entries immediately above this line
	,
	ModNumPlatformDebugModules
} LibSiiPlatformModules_t;

// PAL UPnP debug levels
#define PLATFORM_PAL_UPNP_LEVEL_NONE    SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalUpnp, SII_OS_DEBUG_LEVEL_NONE)
#define PLATFORM_PAL_UPNP_LEVEL_ERR     SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalUpnp, SII_OS_DEBUG_LEVEL_ERR)
#define PLATFORM_PAL_UPNP_LEVEL_WRN     SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalUpnp, SII_OS_DEBUG_LEVEL_WRN)
#define PLATFORM_PAL_UPNP_LEVEL_DBG     SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalUpnp, SII_OS_DEBUG_LEVEL_DBG)
#define PLATFORM_PAL_UPNP_LEVEL_TRC     SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalUpnp, SII_OS_DEBUG_LEVEL_TRC)
#define PLATFORM_PAL_UPNP_LEVEL_USER1   SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalUpnp, SII_OS_DEBUG_LEVEL_USER1)
#define PLATFORM_PAL_UPNP_LEVEL_USER2   SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalUpnp, SII_OS_DEBUG_LEVEL_USER2)
#define PLATFORM_PAL_UPNP_LEVEL_USER3   SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalUpnp, SII_OS_DEBUG_LEVEL_USER3)

// PAL CEC debug levels
#define PLATFORM_PAL_CEC_LEVEL_NONE     SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalCec, SII_OS_DEBUG_LEVEL_NONE)
#define PLATFORM_PAL_CEC_LEVEL_ERR      SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalCec, SII_OS_DEBUG_LEVEL_ERR)
#define PLATFORM_PAL_CEC_LEVEL_WRN      SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalCec, SII_OS_DEBUG_LEVEL_WRN)
#define PLATFORM_PAL_CEC_LEVEL_DBG      SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalCec, SII_OS_DEBUG_LEVEL_DBG)
#define PLATFORM_PAL_CEC_LEVEL_TRC      SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalCec, SII_OS_DEBUG_LEVEL_TRC)
#define PLATFORM_PAL_CEC_LEVEL_USER1    SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalCec, SII_OS_DEBUG_LEVEL_USER1)
#define PLATFORM_PAL_CEC_LEVEL_USER2    SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalCec, SII_OS_DEBUG_LEVEL_USER2)
#define PLATFORM_PAL_CEC_LEVEL_USER3    SII_OS_DEBUG_CHANNEL_VALUE(SII_GROUP_PLATFORM, ModPalCec, SII_OS_DEBUG_LEVEL_USER3)

/***** public type definitions ***********************************************/

/** @brief Platform return codes */
typedef enum
{
	/* Success */
	SII_PLATFORM_STATUS_SUCCESS = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_SUCCESS), /** success */

	/* Warnings */
	SII_PLATFORM_STATUS_WARN_PENDING = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_WARN_PENDING), /** operation pending */
	SII_PLATFORM_STATUS_WARN_BREAK = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_WARN_BREAK), /** operation has been interrupted */
	SII_PLATFORM_STATUS_WARN_INCOMPLETE = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_WARN_INCOMPLETE), /** operation only partially completed */
	SII_PLATFORM_STATUS_ERR_NOT_IMPLEMENTED = -21, /** please don't overload this with anything else */

	/* Errors */
	SII_PLATFORM_STATUS_ERR_INVALID_HANDLE = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_ERR_INVALID_HANDLE), /** invalid handle */
	SII_PLATFORM_STATUS_ERR_INVALID_PARAM = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_ERR_INVALID_PARAM), /** invalid parameter */
	SII_PLATFORM_STATUS_ERR_INVALID_OP = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_ERR_INVALID_OP), /** invalid operation */
	SII_PLATFORM_STATUS_ERR_NOT_AVAIL = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_ERR_NOT_AVAIL), /** requested resource not available */
	SII_PLATFORM_STATUS_ERR_IN_USE = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_ERR_IN_USE), /** requested resource is in use */
	SII_PLATFORM_STATUS_ERR_TIMEOUT = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_ERR_TIMEOUT), /** timeout expired */
	SII_PLATFORM_STATUS_ERR_FAILED = SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, SII_STATUS_ERR_FAILED), /** general failure */

	SII_PLATFORM_STATUS_LAST
} SiiPlatformStatus_t;

#define SiiOsStatus_to_SiiPlatformStatus(s) (SII_STATUS_SET_GROUP(SII_GROUP_PLATFORM, s))

/***** public function prototypes ********************************************/

bool_t SiiPlatformStatusIsError(const SiiPlatformStatus_t status);

bool_t SiiPlatformStatusIsWarning(const SiiPlatformStatus_t status);

const char * SiiPlatformStatusString(const SiiPlatformStatus_t status);

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#endif /* !defined(PLATFORM_TYPES_H) */
