#include <alljoyn/BusAttachment.h>
#include <set>
#ifndef _CE_KEYCODES_H_
#define _CE_KEYCODES_H_

namespace ajn
{
namespace services
{

class CEKeyCodes
{
public:

	enum keys
	{
		CE_KEYCODE_SELECT = 0x00,
		CE_KEYCODE_UP = 0x01,
		CE_KEYCODE_DOWN = 0x02,
		CE_KEYCODE_LEFT = 0x03,
		CE_KEYCODE_RIGHT = 0x04,
		CE_KEYCODE_RIGHT_UP = 0x05,
		CE_KEYCODE_RIGHT_DOWN = 0x06,
		CE_KEYCODE_LEFT_UP = 0x07,
		CE_KEYCODE_LEFT_DOWN = 0x08,
		CE_KEYCODE_MENU = 0x09,
		CE_KEYCODE_SETUP_MENU = 0x0A,
		CE_KEYCODE_CONTENTS_MENU = 0x0B,
		CE_KEYCODE_FAVORITE_MENU = 0x0C,
		CE_KEYCODE_EXIT = 0x0D,
		CE_KEYCODE_NUMBER_KEY_0 = 0x20,
		CE_KEYCODE_NUMBER_KEY_1 = 0x21,
		CE_KEYCODE_NUMBER_KEY_2 = 0x22,
		CE_KEYCODE_NUMBER_KEY_3 = 0x23,
		CE_KEYCODE_NUMBER_KEY_4 = 0x24,
		CE_KEYCODE_NUMBER_KEY_5 = 0x25,
		CE_KEYCODE_NUMBER_KEY_6 = 0x26,
		CE_KEYCODE_NUMBER_KEY_7 = 0x27,
		CE_KEYCODE_NUMBER_KEY_8 = 0x28,
		CE_KEYCODE_NUMBER_KEY_9 = 0x29,
		CE_KEYCODE_DOT = 0x2A,       // '.' or '-' for US channel numbers
		CE_KEYCODE_ENTER = 0x2B,
		CE_KEYCODE_CLEAR = 0x2C,
		CE_KEYCODE_NEXT_FAVORITE = 0x2F,
		CE_KEYCODE_CHANNEL_UP = 0x30,
		CE_KEYCODE_CHANNEL_DOWN = 0x31,
		CE_KEYCODE_PREVIOUS_CHANNEL = 0x32,
		CE_KEYCODE_AUDIO = 0x33, // (used to select alternate audio track)
		CE_KEYCODE_SOURCE = 0x34,
		CE_KEYCODE_INFO = 0x35,
		CE_KEYCODE_HELP = 0x36,
		CE_KEYCODE_PAGE_UP = 0x37,
		CE_KEYCODE_PAGE_DOWN = 0x38,
		CE_KEYCODE_POWER = 0x40,
		CE_KEYCODE_VOLUME_UP = 0x41,
		CE_KEYCODE_VOLUME_DOWN = 0x42,
		CE_KEYCODE_MUTE = 0x43,
		CE_KEYCODE_PLAY = 0x44,
		CE_KEYCODE_STOP = 0x45,
		CE_KEYCODE_PAUSE = 0x46,
		CE_KEYCODE_RECORD = 0x47,
		CE_KEYCODE_FAST_REVERSE = 0x48,
		CE_KEYCODE_FAST_FORWARD = 0x49,
		CE_KEYCODE_EJECT = 0x4A,
		CE_KEYCODE_SKIP_FORWARD = 0x4B,
		CE_KEYCODE_SKIP_REVERSE = 0x4C,
		CE_KEYCODE_STOP_RECORD = 0x4D,
		CE_KEYCODE_PAUSE_RECORD = 0x4E,
		CE_KEYCODE_VIDEO = 0x50, //  (used to select alternate video track/angle)
		CE_KEYCODE_SUB_PICTURE = 0x51,
		CE_KEYCODE_VIDEO_ON_DEMAND = 0x52,
		CE_KEYCODE_GUIDE = 0x53,
		CE_KEYCODE_TIMER_PROGRAMMING = 0x54,
		CE_KEYCODE_INITIAL_CONFIGURATION = 0x55,
		CE_KEYCODE_PLAY_FUNCTION = 0x60,
		CE_KEYCODE_PAUSE_PLAY_FUNCTION = 0x61,
		CE_KEYCODE_RECORD_FUNCTION = 0x62,
		CE_KEYCODE_PAUSE_RECORD_FUNCTION = 0x63,
		CE_KEYCODE_STOP_FUNCTION = 0x64,
		CE_KEYCODE_MUTE_FUNCTION = 0x65,
		CE_KEYCODE_RESTORE_VOLUME_FUNCTION = 0x66,
		CE_KEYCODE_TUNE_FUNCTION = 0x67,
		CE_KEYCODE_SELECT_MEDIA_FUNCTION = 0x68,
		CE_KEYCODE_SELECT_A_V_Input_Function = 0x69,
		CE_KEYCODE_SELECT_AUDIO_INPUT_FUNCTION = 0x6A,
		CE_KEYCODE_POWER_TOGGLE_FUNCTION = 0x6B,
		CE_KEYCODE_POWER_OFF_FUNCTION = 0x6C,
		CE_KEYCODE_POWER_ON_FUNCTION = 0x6D,
		CE_KEYCODE_F1_BLUE = 0x71,
		CE_KEYCODE_F2_RED = 0x72,
		CE_KEYCODE_F3_GREEN = 0x73,
		CE_KEYCODE_F4_YELLOW = 0x74,
		CE_KEYCODE_F5 = 0x75,
		CE_KEYCODE_TEXT = 0x76,
		CE_KEYCODE_AN_RETURN = 0x91,
		CE_KEYCODE_AN_CHANNEL_LIST = 0x96
	};
	CEKeyCodes();
	~CEKeyCodes();
	qcc::String CEKeycodeString(keys keycode);
	void getKSUPfromKeyList(std::set<unsigned int> keys, unsigned char * ksup);
	void getKeyListfromKSUP(unsigned char * ksup, std::set<unsigned int>* keys);
	void getKeyListfromDeviceType(unsigned int deviceType,
			std::set<unsigned int>* keys);
};

} /* namespace services */
} /* namespace ajn */

#endif /* _CE_KEYCODES_H_ */
