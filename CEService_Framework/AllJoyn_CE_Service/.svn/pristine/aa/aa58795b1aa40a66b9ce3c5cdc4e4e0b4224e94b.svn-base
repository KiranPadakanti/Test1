/******************************************************************************
 *
 * Copyright 2008-2013, Silicon Image, Inc.  All rights reserved.
 * No part of this work may be reproduced, modified, distributed, transmitted,
 * transcribed, or translated into any language or computer format, in any form
 * or by any means without written permission of: Silicon Image, Inc., 1060
 * East Arques Avenue, Sunnyvale, California 94085
 *
 *****************************************************************************/
/**
 * @file os_string.h
 *
 * This file contains declarations to abstract string operations
 *
 * Don't use source control directives!
 * Don't use source control directives!
 * Don't use source control directives!
 *
 *****************************************************************************/

#ifndef OS_STRING_H_
#define OS_STRING_H_

/** \addtogroup OSAL OS Abstraction Layer
 * @{
 * This provides the Abstraction Layer interface between ULMUS and OS library
 */

#include "sii_types.h"
#include "os_types.h"

/**
 *  @name String
 *  @{
 **/
/************************************************************************//**
 *
 * @brief copies specified bytes from source to destination (public API)
 *
 * @param[out]     p2            address of destination block
 * @param[in]      p1			 address of source block
 * @param[in]      uSize		 size in bytes
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS no error
 * @note
 *
 ******************************************************************************/

SiiOsStatus_t SiiOsMemcpy(void *p1, const void *p2, size_t uSize);

/**************************************************************************
 *
 * @brief Compare two memory blocks upto the size specified (public API)
 *
 * @param[in]     p1            address of the first block
 * @param[in]     p2            address of the second block
 * @param[in]     uSize			size in bytes to be compared
 * @param[out]	  pComparison	integer value indicating the relationship between the content of the memory blocks:
 *								A zero value indicates that the contents of both memory blocks are equal.
 *								A value greater than zero indicates that the first byte that does not match in both memory blocks has a greater value in ptr1 than in ptr2 as if evaluated as unsigned char values; 
 *								And a value less than zero indicates the opposite.
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS no error
 *
 * @note 
 *
 ******************************************************************************/

SiiOsStatus_t SiiOsMemcmp(const void *p1, const void *p2, size_t uSize,
		int32_t *pComparison);

/**************************************************************************
 *
 * @brief Sets the first uSize bytes of the block of memory pointed by p1 to the specified value uVal (public API)
 *
 * @param[in]     p1            pointer to address of the block of memory
 * @param[in]     uVal          Specific value to be written to memory block
 * @param[in]     uSize			number of bytes to be written
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS no error
 *
 * @note 
 *
 ******************************************************************************/
SiiOsStatus_t SiiOsMemset(void *p1, uint8_t uVal, size_t uSize);

/**************************************************************************
 *
 * @brief finds the length of the string (public API)
 *
 * @param[in]     pszString            pointer to the string 
 * @param[out]    pSize				   pointer to the length of string 
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS no error
 *
 * @note 
 *
 ******************************************************************************/
SiiOsStatus_t SiiOsStrlen(const char *pszString, size_t *pSize);

/**************************************************************************
 *
 * @brief copies the source string to destination string (public API)
 *
 * @param[out]     pszDest           pointer to the destination string 
 * @param[in]      pszSrc			 pointer to the source string 
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS no error
 *
 * @note 
 *
 ******************************************************************************/
SiiOsStatus_t SiiOsStrcpy(char *pszDest, const char *pszSrc);

/**************************************************************************
 *
 * @brief copies given number of bytes from source string to destination string (public API)
 *
 * @param[out]     pszDest           pointer to the destination string 
 * @param[in]      pszSrc			 pointer to the source string 
 * @param[in]      uSize			 number of bytes to be copied from source string
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS no error
 *
 * @note 
 *
 ******************************************************************************/
SiiOsStatus_t SiiOsStrncpy(char *pszDest, const char *pszSrc, size_t uSize);

/**************************************************************************
 *
 * @brief compares the two strings and returns the comparison result (public API)
 *
 * @param[in]     pszStr1            pointer to the first string 
 * @param[in]     pszStr2			 pointer to the second string 
 * @param[out]    pComparison		 pointer to an integer value indicating the relationship between the strings:
 *									 a zero value indicates that both strings are equal.
 *									 a value greater than zero indicates that the first character that does not match has a greater value in str1 than in str2
 *									 And a value less than zero indicates the opposite.
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS no error
 *
 * @note 
 *
 ******************************************************************************/
SiiOsStatus_t SiiOsStrcmp(const char *pszStr1, const char *pszStr2,
		int32_t *pComparison);

/**************************************************************************
 *
 * @brief compares the given number of bytes from the starting of two strings and returns the comparison result (public API)
 *
 * @param[in]     pszStr1            pointer to the first string 
 * @param[in]     pszStr2			 pointer to the second string 
 * @param[in]     uSize			     number of bytes to be compared 
 * @param[out]    pComparison		 pointer to an integer value indicating the relationship between the strings:
 *									 a zero value indicates that both strings are equal.
 *									 a value greater than zero indicates that the first character that does not match has a greater value in str1 than in str2
 *									 And a value less than zero indicates the opposite.
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS no error
 *
 * @note 
 *
 ******************************************************************************/
SiiOsStatus_t SiiOsStrncmp(const char *pszStr1, const char *pszStr2,
		size_t uSize, int32_t *pComparison);

SiiOsStatus_t SiiOsSprintf(char *pBuffer, const char *pszFormat, ...);
SiiOsStatus_t SiiOsSprintfrc(int* count, char *pBuffer, const char *pszFormat, ...);

SiiOsStatus_t SiiOsSnprintf(uint8_t *src, size_t size, int32_t *output,
		const char *format, ...);

/**************************************************************************
 *
 * @brief Convert string to integer (public API)
 *
 * @param[in]     nptr        string beginning with the representation of an integral number.
 * 
 *
 * @return integer value
 * @retval returns the converted integral number as an int value.
 *
 * @note If the converted value would be out of the range of representable values by an int, it causes undefined behavior. 
 *
 ******************************************************************************/
int32_t SiiOsAtoI(const char *nptr);

uint32_t SiiOsAtoU(const char *nptr);

uint64_t SiiOsStrtoULL(int8_t *nptr);

char *SiiOsStrStr(const char *s1, const char *s2);

char *SiiOsStrChr(const char *s, int c);

char *SiiOsStrcat(char *s1, const char *s2);
/**************************************************************************
 *
 * @brief searches string for the last occurrence of given character(Integer format). The null character terminating string is included in the search. (public API)
 *
 * @param[in]     *inputString        input string pointer to be searched.
 * @param[out]    *outputString       output string pointer contains the last occurance of given character value.
 * @param[in]	  val				  character to be searched in string for the last occurance.
 *
 * @return status code
 * @retval SII_OS_STATUS_SUCCESS or SII_OS_STATUS_ERR_INVALID_PARAM.
 *
 * @note
 *
 ******************************************************************************/
SiiOsStatus_t SiiOsStrrchr(int8_t *inputString, int8_t *outputString, int val);

/** @}*//* String */
/** @}*//* OS Abstraction Layer */

#endif /* OS_STRING_H_ */

