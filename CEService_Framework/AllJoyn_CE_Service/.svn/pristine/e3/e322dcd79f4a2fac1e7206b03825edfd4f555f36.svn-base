#include <alljoyn/ce/CEClient.h>
#include <alljoyn/ce/LogModule.h>
#include <qcc/Debug.h>

using namespace ajn;
using namespace services;

static const char* CE_OBJECT_PATH = "/CE";
static const char* CE_INTERFACE_NAME = "org.alljoyn.CE";

CEClient::CEClient(ajn::BusAttachment& bus) :
		m_BusAttachment(&bus)
{
	QCC_DbgTrace(("CEClient::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const InterfaceDescription* p_InterfaceDescription = NULL;
	p_InterfaceDescription = m_BusAttachment->GetInterface(CE_INTERFACE_NAME);
	if (!p_InterfaceDescription)
	{
		InterfaceDescription* p_InterfaceDescription = NULL;
		status = m_BusAttachment->CreateInterface(CE_INTERFACE_NAME,
				p_InterfaceDescription, false);
		if (p_InterfaceDescription && status == ER_OK)
		{
			do
			{
				status = p_InterfaceDescription->AddMethod("SendCECommand", "u",
						NULL, "command");
				if (status != ER_OK)
				{
					break;
				}
				status = p_InterfaceDescription->AddMethod("GetKSUP", NULL,
						"ay", "content");
				if (status != ER_OK)
				{
					break;
				}
				status = p_InterfaceDescription->AddProperty("Version", "q",
						PROP_ACCESS_READ);
				if (status != ER_OK)
				{
					break;
				}
				status = p_InterfaceDescription->AddProperty("DeviceType", "u",
						PROP_ACCESS_READ);
				if (status != ER_OK)
				{
					break;
				}
				status = p_InterfaceDescription->AddSignal("Notify", "qqay",
						"version,deviceType,ksup", 0);
				if (status != ER_OK)
				{
					break;
				}
				p_InterfaceDescription->Activate();
				return;
			} while (0);
		}
		QCC_DbgPrintf(
				("CEClient::CEClient - interface=[%s] could not be created. status=[%s]", CE_INTERFACE_NAME, QCC_StatusText(status)));
	}
}

CEClient::~CEClient()
{
}

QStatus CEClient::SendCECommand(const char* busName, unsigned int command,
		ajn::SessionId sessionId)
{
	QCC_DbgTrace(("CEClient::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const InterfaceDescription* p_InterfaceDescription =
			m_BusAttachment->GetInterface(CE_INTERFACE_NAME);
	if (!p_InterfaceDescription)
	{
		return ER_FAIL;
	}
	ProxyBusObject* proxyBusObj = new ProxyBusObject(*m_BusAttachment, busName,
			CE_OBJECT_PATH, sessionId);
	if (!proxyBusObj)
	{
		return ER_FAIL;
	}
	do
	{
		status = proxyBusObj->AddInterface(*p_InterfaceDescription);
		if (status != ER_OK)
		{
			break;
		}

		Message replyMsg(*m_BusAttachment);
		MsgArg args[1];
		status = args[0].Set("u", command);
		if (status != ER_OK)
		{
			break;
		}
		status = proxyBusObj->MethodCall(CE_INTERFACE_NAME, "SendCECommand",
				args, 1, replyMsg);
		if (status == ER_BUS_REPLY_IS_ERROR_MESSAGE)
		{
			qcc::String errorMessage;
			QCC_LogError(status,
					("GetCEData ::Error name=%s ErorrMessage=%s", replyMsg->GetErrorName(&errorMessage), errorMessage.c_str()));
		}
		if (status != ER_OK)
		{
			break;
		}

	} while (0);

	delete proxyBusObj;
	proxyBusObj = NULL;
	return status;
}

QStatus CEClient::GetVersion(const char* busName, int& version,
		ajn::SessionId sessionId)
{
	QCC_DbgTrace(("CEClient::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const InterfaceDescription* p_InterfaceDescription =
			m_BusAttachment->GetInterface(CE_INTERFACE_NAME);
	if (!p_InterfaceDescription)
	{
		return ER_FAIL;
	}
	ProxyBusObject* proxyBusObj = new ProxyBusObject(*m_BusAttachment, busName,
			CE_OBJECT_PATH, sessionId);
	if (!proxyBusObj)
	{
		return ER_FAIL;
	}
	MsgArg arg;
	if (ER_OK == proxyBusObj->AddInterface(*p_InterfaceDescription))
	{
		status = proxyBusObj->GetProperty(CE_INTERFACE_NAME, "Version", arg);
		if (ER_OK == status)
		{
			version = arg.v_variant.val->v_int16;
		}
	}
	delete proxyBusObj;
	proxyBusObj = NULL;
	return status;
}

QStatus CEClient::GetDeviceType(const char* busName, unsigned int& deviceType,
		ajn::SessionId sessionId)
{
	QCC_DbgTrace(("CEClient::%s", __FUNCTION__));
	QStatus status = ER_OK;
	const InterfaceDescription* p_InterfaceDescription =
			m_BusAttachment->GetInterface(CE_INTERFACE_NAME);
	if (!p_InterfaceDescription)
	{
		return ER_FAIL;
	}
	ProxyBusObject* proxyBusObj = new ProxyBusObject(*m_BusAttachment, busName,
			CE_OBJECT_PATH, sessionId);
	if (!proxyBusObj)
	{
		return ER_FAIL;
	}
	MsgArg arg;
	if (ER_OK == proxyBusObj->AddInterface(*p_InterfaceDescription))
	{
		status = proxyBusObj->GetProperty(CE_INTERFACE_NAME, "DeviceType", arg);
		if (ER_OK == status)
		{
			deviceType = arg.v_variant.val->v_uint32;
		}
	}
	delete proxyBusObj;
	proxyBusObj = NULL;
	return status;
}

QStatus CEClient::GetKSUP(const char* busName, uint8_t* content,
		size_t& contentSize, ajn::SessionId sessionId)
{

	QCC_DbgTrace(("CEClient::%s", __FUNCTION__));
	QStatus status = ER_OK;
	uint8_t * pContent = NULL;
	const InterfaceDescription* p_InterfaceDescription =
			m_BusAttachment->GetInterface(CE_INTERFACE_NAME);
	if (!p_InterfaceDescription)
	{
		return ER_FAIL;
	}
	ProxyBusObject*proxyBusObj = new ProxyBusObject(*m_BusAttachment, busName,
			CE_OBJECT_PATH, sessionId);
	if (!proxyBusObj)
	{
		return ER_FAIL;
	}
	status = proxyBusObj->AddInterface(*p_InterfaceDescription);
	if (status != ER_OK)
	{
		delete proxyBusObj;
		proxyBusObj = NULL;
		return status;
	}
	Message replyMsg(*m_BusAttachment);
	status = proxyBusObj->MethodCall(CE_INTERFACE_NAME, "GetKSUP", NULL, 0,
			replyMsg);
	if (status == ER_OK)
	{
		const ajn::MsgArg* returnArgs;
		size_t numArgs;
		replyMsg->GetArgs(numArgs, returnArgs);
		if (numArgs == 1)
		{
			status = returnArgs[0].Get("ay", &contentSize, &pContent);
			memcpy(content, pContent, 32);
		}
		else
		{
			status = ER_BUS_BAD_VALUE;
		}
	}
	delete proxyBusObj;
	proxyBusObj = NULL;
	return status;

}
