#ifndef _VENDORSERVICE_H_
#define _VENDORSERVICE_H_

#include <alljoyn/about/PropertyStore.h>
#include <alljoyn/BusObject.h>

namespace ajn
{
namespace services
{
/**
 * Vendor Service is an AllJoyn BusObject that implements the org.alljoyn.VENDOR standard interface.
 * Applications that provide AllJoyn IoE services use an instance of this class to receive
 * to CE Commands to Vendor Service
 */
class VendorService: public ajn::BusObject
{
public:

	/**
	 *	Listener is a callback that is called by VendorService implemented  by the application to provide system calls and control
	 *
	 */
	class Listener
	{
	public:
		/**
		 * @param[in] command CEC Command received ex: PLAY
		 * @param[in] la logical address of destination
		 */
		virtual QStatus VendorSendCECommandCallback(unsigned int command,
				unsigned int la) = 0;

		/**
		 *
		 */
		virtual ~Listener() = 0;
	};
	/**
	 * Construct an VendorService.
	 * @param[in]  bus    BusAttachment instance associated with this VendorService
	 */
	VendorService(ajn::BusAttachment& bus, PropertyStore& store,
			Listener& listener);
	/**
	 * destructor
	 */
	virtual ~VendorService()
	{
	}

	/**
	 * Register the VendorService on the AllJoyn bus passing the port to be announced.
	 * @return status.
	 */
	QStatus Register();
	/**
	 * Unregister the CE service  from the bus
	 */
	void Unregister();

private:
	/**
	 * Handles  VendorSendCECommand method
	 * @param[in]  member
	 * @param[in]  msg reference of AllJoyn Message
	 */
	void VendorSendCECommand(const ajn::InterfaceDescription::Member* member,
			ajn::Message& msg);

	/**
	 * Handles the GetPropery request
	 * @param[in]  ifcName  interface name
	 * @param[in]  propName the name of the properly
	 * @param[in]  val reference of MsgArg out parameter.
	 * @return ER_OK if successful.
	 */
	QStatus Get(const char* ifcName, const char* propName, MsgArg& val);

	/**
	 * pointer of BusAttachment
	 */
	ajn::BusAttachment* m_BusAttachment;

	/**
	 * pointer of PropertyStore implementing the storage.
	 */
	PropertyStore* m_PropertyStore;

	/**
	 * pointer of Listener
	 */
	Listener* m_Listener;
};
inline VendorService::Listener::~Listener()
{
}

} /* namespace services */
} /* namespace ajn */

#endif /*_VENDORSERVICE_H_*/
